@use 'sass:meta';
@use '@angular/material' as mat;
@use 'm2-theme' as m2Theme;
@use 'm3-theme' as m3Theme;

@if (meta.mixin-exists('theme', 'mat')) {
  @debug "Mixin 'theme' exists in 'mat'";
}
@if (meta.mixin-exists('system-level-colors', 'mat')) {
  @debug "Mixin 'system-level-colors' exists in 'mat'";
}
@if (meta.mixin-exists('color-variants-backwards-compatibility', 'mat')) {
  @debug "Mixin 'color-variants-backwards-compatibility' exists in 'mat'";
}
@if (meta.mixin-exists('typography-hierarchy', 'mat')) {
  @debug "Mixin 'typography-hierarchy' exists in 'mat'";
}
@if (meta.function-exists('get-theme-version', 'mat')) {
  @debug "Function 'get-theme-version' exists in 'mat'";
}
@if (meta.function-exists('define-theme', 'mat')) {
  @debug "Function 'define-theme' exists in 'mat'";
}
@if (meta.function-exists('define-light-theme', 'mat') or meta.function-exists('define-dark-theme', 'mat')) {
  @debug "Function 'define-light-theme' or 'define-dark-theme' exists in 'mat'";
}
@if (meta.function-exists('m2-define-light-theme', 'mat') or meta.function-exists('m2-define-dark-theme', 'mat')) {
  @debug "Function 'm2-define-light-theme' or 'm2-define-dark-theme' exists in 'mat'";
}

@mixin set-backwards-compatibility-mixins($theme) {
  @if (meta.function-exists('get-theme-version', 'mat')) {
    @if mat.get-theme-version($theme) == 1 {
      @if (meta.mixin-exists('color-variants-backwards-compatibility', 'mat')) {
        @include mat.color-variants-backwards-compatibility($theme);
      }
      @if (meta.mixin-exists('typography-hierarchy', 'mat')) {
        @include mat.typography-hierarchy($theme);
      }
    }
  }
}

@mixin set-mat-component-themes($dark-theme, $light-theme) {
  // Apply the dark theme by default
  @include mat.core-theme($dark-theme);
  @include mat.card-theme($dark-theme);
  @include mat.progress-bar-theme($dark-theme);
  @include mat.tooltip-theme($dark-theme);
  @include mat.form-field-theme($dark-theme);
  @include mat.input-theme($dark-theme);
  @include mat.select-theme($dark-theme);
  @include mat.autocomplete-theme($dark-theme);
  @include mat.dialog-theme($dark-theme);
  @include mat.chips-theme($dark-theme);
  @include mat.slider-theme($dark-theme);
  @include mat.menu-theme($dark-theme);
  @include mat.list-theme($dark-theme);
  @include mat.paginator-theme($dark-theme);
  @include mat.tabs-theme($dark-theme);
  @include mat.button-theme($dark-theme);
  @include mat.icon-button-theme($dark-theme);
  @include mat.fab-theme($dark-theme);
  @include mat.snack-bar-theme($dark-theme);
  @include mat.table-theme($dark-theme);
  @include mat.progress-spinner-theme($dark-theme);
  @include mat.badge-theme($dark-theme);
  @include mat.bottom-sheet-theme($dark-theme);
  @include mat.button-toggle-theme($dark-theme);
  @include mat.datepicker-theme($dark-theme);
  @include mat.divider-theme($dark-theme);
  @include mat.expansion-theme($dark-theme);
  @include mat.grid-list-theme($dark-theme);
  @include mat.icon-theme($dark-theme);
  @include mat.sidenav-theme($dark-theme);
  @include mat.stepper-theme($dark-theme);
  @include mat.sort-theme($dark-theme);
  @include mat.toolbar-theme($dark-theme);
  @include mat.tree-theme($dark-theme);
  @if (meta.mixin-exists('timepicker-theme', 'mat')) {
    @include mat.timepicker-theme($dark-theme);
  }

  // Apply Alternative Dark Theme For Select Components
  @include mat.checkbox-theme($dark-theme);
  @include mat.radio-theme($dark-theme);
  @include mat.slide-toggle-theme($dark-theme);

  @include mat.strong-focus-indicators-theme($dark-theme);
  @if (meta.mixin-exists('system-level-colors', 'mat')) {
    @include mat.system-level-colors($dark-theme);
  }
  @include set-backwards-compatibility-mixins($dark-theme);

  @media (prefers-color-scheme: light) {
    // Use the `-color` mixins to only apply color styles without reapplying the same
    // typography and density styles.
    @include mat.core-color($light-theme);
    @include mat.card-color($light-theme);
    @include mat.progress-bar-color($light-theme);
    @include mat.tooltip-color($light-theme);
    @include mat.form-field-color($light-theme);
    @include mat.input-color($light-theme);
    @include mat.select-color($light-theme);
    @include mat.autocomplete-color($light-theme);
    @include mat.dialog-color($light-theme);
    @include mat.chips-color($light-theme);
    @include mat.slider-color($light-theme);
    @include mat.menu-color($light-theme);
    @include mat.list-color($light-theme);
    @include mat.paginator-color($light-theme);
    @include mat.tabs-color($light-theme);
    @include mat.button-color($light-theme);
    @include mat.icon-button-color($light-theme);
    @include mat.fab-color($light-theme);
    @include mat.snack-bar-color($light-theme);
    @include mat.table-color($light-theme);
    @include mat.progress-spinner-color($light-theme);
    @include mat.badge-color($light-theme);
    @include mat.bottom-sheet-color($light-theme);
    @include mat.button-toggle-color($light-theme);
    @include mat.datepicker-color($light-theme);
    @include mat.divider-color($light-theme);
    @include mat.expansion-color($light-theme);
    @include mat.grid-list-color($light-theme);
    @include mat.icon-color($light-theme);
    @include mat.sidenav-color($light-theme);
    @include mat.stepper-color($light-theme);
    @include mat.sort-color($light-theme);
    @include mat.toolbar-color($light-theme);
    @include mat.tree-color($light-theme);
    @if (meta.mixin-exists('timepicker-color', 'mat')) {
      @include mat.timepicker-color($light-theme);
    }

    // Apply Alternative Light Colors For Select Components
    @include mat.checkbox-color($light-theme);
    @include mat.radio-color($light-theme);
    @include mat.slide-toggle-color($light-theme);

    @include mat.strong-focus-indicators-color($light-theme);
    @if (meta.mixin-exists('system-level-colors', 'mat')) {
      @include mat.system-level-colors($light-theme);
    }
    @include set-backwards-compatibility-mixins($light-theme);
  }
}

@mixin define-angular-19-m3-theme() {
  @debug 'Executing ngx-example-theme mixin: define-angular-19-m3-theme';
  html {
    color-scheme: light dark;
    @include mat.theme(
      (
        color: (
          theme-type: dark,
          primary: m3Theme.$primary,
          tertiary: m3Theme.$tertiary,
        ),
        typography: (
          use-system-variables: true,
          system-variables-prefix: sys,
        ),
        density: 0,
      )
    );

    @media (prefers-color-scheme: light) {
      @include mat.theme(
        (
          color: (
            theme-type: light,
            primary: m3Theme.$tertiary,
            tertiary: m3Theme.$primary,
            use-system-variables: true,
            system-variables-prefix: sys,
          ),
          typography: (
            use-system-variables: true,
            system-variables-prefix: sys,
          ),
          density: 0,
        )
      );
    }
  }
  @include define-angular-18-m3-theme();
}

@mixin define-angular-18-m3-theme() {
  @debug 'Executing ngx-example-theme mixin: define-angular-18-m3-theme';
  $light-theme: mat.define-theme(
    (
      color: (
        theme-type: light,
        primary: m3Theme.$tertiary,
        tertiary: m3Theme.$primary,
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
      typography: (
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
    )
  );
  $light-theme-alt: mat.define-theme(
    (
      color: (
        theme-type: light,
        primary: m3Theme.$primary,
        tertiary: m3Theme.$tertiary,
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
      typography: (
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
    )
  );
  $dark-theme: mat.define-theme(
    (
      color: (
        theme-type: dark,
        primary: m3Theme.$primary,
        tertiary: m3Theme.$tertiary,
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
      typography: (
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
    )
  );
  $dark-theme-alt: mat.define-theme(
    (
      color: (
        theme-type: dark,
        primary: m3Theme.$tertiary,
        tertiary: m3Theme.$primary,
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
      typography: (
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
    )
  );

  html {
    color-scheme: light dark;
    @include set-mat-component-themes($dark-theme, $light-theme);
  }
}

@mixin define-legacy-theme() {
  @debug 'Executing ngx-example-theme mixin: define-legacy-theme';
  $dark-theme: mat.define-dark-theme(
    (
      color: (
        primary: mat.define-palette(m2Theme.$primary-palette, A100),
        accent: mat.define-palette(m2Theme.$tertiary-palette, A100),
        warn: mat.define-palette(m2Theme.$error-palette, 200),
      ),
      // Only include `typography` and `density` in the default dark theme.
      typography: mat.define-typography-config(),
      density: 0,
    )
  );
  $light-theme: mat.define-light-theme(
    (
      color: (
        primary: mat.define-palette(m2Theme.$tertiary-palette, 600),
        accent: mat.define-palette(m2Theme.$primary-palette, 600),
        warn: mat.define-palette(m2Theme.$error-palette, 600),
      ),
    )
  );

  @include set-mat-component-themes($dark-theme, $light-theme);
}

@mixin define-m2-theme() {
  @debug 'Executing ngx-example-theme mixin: define-m2-theme';
  $dark-theme: mat.m2-define-dark-theme(
    (
      color: (
        primary: mat.define-palette(m2Theme.$primary-palette, A100),
        accent: mat.define-palette(m2Theme.$tertiary-palette, A100),
        warn: mat.define-palette(m2Theme.$error-palette, 200),
      ),
      // Only include `typography` and `density` in the default dark theme.
      typography: mat.m2-define-typography-config(),
      density: 0,
    )
  );
  $light-theme: mat.m2-define-light-theme(
    (
      color: (
        primary: mat.define-palette(m2Theme.$tertiary-palette, 600),
        accent: mat.define-palette(m2Theme.$primary-palette, 600),
        warn: mat.define-palette(m2Theme.$error-palette, 600),
      ),
    )
  );

  @include set-mat-component-themes($dark-theme, $light-theme);
}

@mixin determine-theme-version() {
  @debug 'Executing ngx-example-theme mixin: determine-theme-version';
  @if (meta.mixin-exists('theme', 'mat')) {
    @include define-angular-19-m3-theme();
  } @else if (meta.function-exists('define-theme', 'mat')) {
    @include define-angular-18-m3-theme();
  } @else if (meta.function-exists('define-light-theme', 'mat') or meta.function-exists('define-dark-theme', 'mat')) {
    @include define-legacy-theme();
  } @else if
    (meta.function-exists('m2-define-light-theme', 'mat') or meta.function-exists('m2-define-dark-theme', 'mat'))
  {
    @include define-m2-theme();
  } @else {
    @error 'Could not determine the Angular Material version. Make sure you have Angular Material installed.';
  }
}

@include determine-theme-version();

html {
  color: rgb(255, 255, 255);

  @media (prefers-color-scheme: light) {
    color: rgb(0, 0, 0);
  }
}
