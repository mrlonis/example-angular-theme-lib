@use 'sass:meta';
@use '@angular/material' as mat;
@use 'm2-theme' as m2Theme;
@use 'm3-theme' as m3Theme;

@mixin set-font-colors() {
  html {
    color: rgb(255, 255, 255);

    @media (prefers-color-scheme: light) {
      color: rgb(0, 0, 0);
    }
  }
}

@mixin define-angular-19-m3-theme() {
  html {
    color-scheme: light dark;
    @include mat.theme(
      (
        color: (
          theme-type: dark,
          primary: m3Theme.$primary,
          tertiary: m3Theme.$tertiary,
        ),
        typography: (
          use-system-variables: true,
          system-variables-prefix: sys,
        ),
        density: 0,
      )
    );

    @media (prefers-color-scheme: light) {
      @include mat.theme(
        (
          color: (
            theme-type: light,
            primary: m3Theme.$tertiary,
            tertiary: m3Theme.$primary,
            use-system-variables: true,
            system-variables-prefix: sys,
          ),
          typography: (
            use-system-variables: true,
            system-variables-prefix: sys,
          ),
          density: 0,
        )
      );
    }
  }
  @include set-font-colors();
}

@mixin set-mat-component-themes($dark-theme, $light-theme) {
  // Apply the dark theme by default
  @include mat.all-component-themes($dark-theme);
  @include mat.strong-focus-indicators-theme($dark-theme);

  @media (prefers-color-scheme: light) {
    // Use the `-color` mixins to only apply color styles without reapplying the same
    // typography and density styles.
    @include mat.all-component-colors($light-theme);
    @include mat.strong-focus-indicators-color($light-theme);
  }
}

@mixin set-system-level-colors($dark-theme, $light-theme) {
  @include mat.system-level-colors($dark-theme);

  @media (prefers-color-scheme: light) {
    @include mat.system-level-colors($light-theme);
  }
}

@mixin define-angular-18-m3-theme() {
  $light-theme: mat.define-theme(
    (
      color: (
        theme-type: light,
        primary: m3Theme.$tertiary,
        tertiary: m3Theme.$primary,
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
      typography: (
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
    )
  );
  $dark-theme: mat.define-theme(
    (
      color: (
        theme-type: dark,
        primary: m3Theme.$primary,
        tertiary: m3Theme.$tertiary,
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
      typography: (
        use-system-variables: true,
        system-variables-prefix: sys,
      ),
    )
  );

  html {
    color-scheme: light dark;
    @include set-mat-component-themes($dark-theme, $light-theme);
    @include set-system-level-colors($dark-theme, $light-theme);
  }
  @include set-font-colors();
}

@mixin define-legacy-theme() {
  $dark-theme: mat.define-dark-theme(
    (
      color: (
        primary: mat.define-palette(m2Theme.$primary-palette, A100),
        accent: mat.define-palette(m2Theme.$primary-palette, 800),
      ),
      // Only include `typography` and `density` in the default dark theme.
      typography: mat.define-typography-config(),
      density: 0,
    )
  );
  $light-theme: mat.define-light-theme(
    (
      color: (
        primary: mat.define-palette(m2Theme.$tertiary-palette, 600),
        accent: mat.define-palette(m2Theme.$tertiary-palette, 100),
      ),
    )
  );

  @include set-mat-component-themes($dark-theme, $light-theme);
  @include set-font-colors();
}

@mixin define-m2-theme() {
  $dark-theme: mat.m2-define-dark-theme(
    (
      color: (
        primary: mat.m2-define-palette(m2Theme.$primary-palette, 200),
        accent: mat.m2-define-palette(m2Theme.$primary-palette, 800),
      ),
      // Only include `typography` and `density` in the default dark theme.
      typography: mat.m2-define-typography-config(),
      density: 0,
    )
  );
  $light-theme: mat.m2-define-light-theme(
    (
      color: (
        primary: mat.m2-define-palette(m2Theme.$tertiary-palette, 600),
        accent: mat.m2-define-palette(m2Theme.$tertiary-palette, 100),
      ),
    )
  );

  @include set-mat-component-themes($dark-theme, $light-theme);
  @include set-font-colors();
}

@mixin determine-theme-version() {
  @if (meta.function-exists('theme', 'mat')) {
    @include define-angular-18-m3-theme();
  } @else if (meta.function-exists('define-theme', 'mat')) {
    @include define-angular-18-m3-theme();
  } @else if (meta.function-exists('define-light-theme', 'mat') or meta.function-exists('define-dark-theme', 'mat')) {
    @include define-legacy-theme();
  } @else if
    (meta.function-exists('m2-define-light-theme', 'mat') or meta.function-exists('m2-define-dark-theme', 'mat'))
  {
    @include define-m2-theme();
  } @else {
    @error 'Could not determine the Angular Material version. Make sure you have Angular Material installed.';
  }
}

@include determine-theme-version();
